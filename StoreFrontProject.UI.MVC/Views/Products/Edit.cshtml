@model StoreFrontProject.Data.EF.Product

@{
    ViewBag.Title = "Edit " + Model.ProductName;
}

<div class="main-banner" id="top">
    <h2 class="text-center">@ViewBag.Title</h2>

    <div class="indexWrapper">
        <div class="col-md-12">
            <div id="mainContent">
                <div class="formContainer col-md-6">

                    <div class="col-md-12">

                        @* Image Upload utility step 9 *@
                        @using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { @enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                <h4>Product</h4>
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ProductID)
                                @* Image Upload utility step 7 *@
                                @Html.HiddenFor(model => model.ProductImage)
                                @*  This hidden for ensure that old filename + ext for this book record is kept and sent back to the server when the edit form is submitted.

                                    Technical Terminology: Persisting data between request and responce cycles
                                *@

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ManufacturerID, "ManufacturerID", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("ManufacturerID", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.ManufacturerID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CategoryID, "CategoryID", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ProductDesc, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ProductDesc, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @* Image Upload Utility step 8 *@
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ProductImage, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @*@Html.EditorFor(model => model.ProductImage, new { htmlAttributes = new { @class = "form-control" } })*@
                                        <img src="~/Content/assets/images/products/@Model.ProductImage" style="max-width: 100px;" />
                                        <hr />
                                        <input type="file" name="productImage" />
                                        @Html.ValidationMessageFor(model => model.ProductImage, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input type="submit" value="Save" class="btn btn-success" />
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="col-md-offset-2 col-md-10">
                            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
