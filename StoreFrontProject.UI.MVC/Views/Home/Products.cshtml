@model PagedList.IPagedList<StoreFrontProject.Data.EF.Product>
@using PagedList.Mvc
@using System.Linq
@using StoreFrontProject.UI.MVC.Exceptions;

@{
    ViewBag.Title = "Products";
}

<!-- ***** Main Banner Area Start ***** -->
<div class="page-heading" id="top">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="inner-content">
                    <h2>Check Our Products</h2>
                    <span>Awesome products for the beginner to veteran players</span>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- ***** Main Banner Area End ***** -->
<!-- ***** Products Area Starts ***** -->
<section class="section" id="products">

    <div class="container">
        @* Below is the search box functionality *@
        <h2 class="text-right">Search</h2>
        @using (Html.BeginForm("Products", "Home", FormMethod.Get))
        {
            <p class="text-right">
                @Html.TextBox("SearchString", ViewBag.SearchString as string)
                <input type="submit" value="search" />
            </p>
        }
        <div class="row">
            <div class="col-lg-12">
                <div class="section-heading">
                    <h2>Our Latest Products</h2>
                    <span>Check out all of our products.</span>
                </div>
            </div>
        </div>
    </div>
    <div class="container">
        @if (Model.PageCount > 0)
        {


        <div class="row">

            @foreach (var item in Model)
            {

                <div class="col-lg-4">
                    <div class="item">
                        <div class="thumb">
                            @*<div class="hover-content">
                                <ul>
                                    <li><a href="single-product.html"><i class="fa fa-eye"></i></a></li>
                                    <li><a href="single-product.html"><i class="fa fa-star"></i></a></li>
                                    <li><a href="single-product.html"><i class="fa fa-shopping-cart"></i></a></li>
                                </ul>
                            </div>*@
                            <a href="@Url.Action("Details", "Products", new { id = item.ProductID })">
                                <img src="~/Content/assets/images/products/@item.ProductImage" alt="Product Image" title="@item.ProductImage" />
                            </a>
                        </div>
                        <div class="down-content">
                            <h4>@Html.DisplayFor(modelItem => item.ProductName)</h4>
                            <span>@Html.DisplayFor(modelItem => item.UnitPrice)</span>

                        </div>
                        @* Shopping Cart Step 2 *@
                        <p class="text-center">
                            @using (Html.BeginForm("AddToCart", "Products", new { @productID = item.ProductID }, FormMethod.Post, new { @class = "text-center" }))
                            {
                                @Html.HiddenFor(modelItem => item.ProductID)
                                <span class="label test-left">Quantity: </span>
                                @Html.TextBox("Qty", 1, new { @class = "form-control", style = "max-width: 35px;display: inline;" })
                                <input type="submit" value="Add to Cart" class="btn btn-primary" name="qty" />
                            }
                        </p>
                    </div>
                </div>
            }
            <div class="col-lg-12">
                <div class="pagination">
                    @*<ul>*@

                    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                    @*
                        The code above displays the current page of X number of records (Page Count). We use the tierney operator above in the event
                        that no records are in the Page Count we won't show "Page 1 of 0"
                    *@

                    @Html.PagedListPager(Model, page => Url.Action("Products", new { page, searchString = ViewBag.SearchString }))
                    @*
                        The code above generates the individual page button. It uses the strongly typed collection defined on line 1 of this view.
                        For each page button, we are creating an Url.Action that goes to the BooksMVCPaging method on the Filters controller. It also
                        passes over the next page number.
                    *@
                </div>
            </div>
        </div>
        }
        else
        {
            <h1 class="text-center">Sorry, your search returned no results!</h1>
        }
    </div>
</section>
<!-- ***** Products Area Ends ***** -->

<script>


    //try {
    //    //    //bool NoResultsCheck = false;

    //    if () {
    //        return View();
    //    }
    //    else {
    //        throw new NoResultsFound();
    //    }

    //}
    //catch (Exception) {

    //    return RedirectToAction("NoResults"); //handle error nicely: send them to a page for these errors
    //}


</script>